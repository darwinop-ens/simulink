%selectfile NULL_FILE

%function FcnSingleTaskingMain(mainFileName) void

  %<LibSetCodeTemplateComplianceLevel(1)>

  %if GenerateSampleERTMain
    %assign CompiledModel.GenerateSampleERTMain = TLC_FALSE
  %endif

  %assign cFile = LibCreateSourceFile("Source", "Custom", mainFileName)
  
  %openfile tmpBuf
  #include <stdio.h>
  #include <unistd.h>
  #include <limits.h>
  #include <string.h>
  #include <libgen.h>
  #include <signal.h>
  #include <time.h>
  #include <sstream>
  #include <iostream>
  #include <stdlib.h>

  #include "CM730.h"
  #include "LinuxNetwork.h"
  #include "LinuxDARwIn.h"

  using namespace std;
  using namespace Robot;

  #include "%<LibGetMdlPubHdrBaseName()>.h"
  #ifdef EXT_MODE
    #include "ext_work.h"          /* External mode header files */
    #include "ext_svr.h"
    #include "ext_share.h"
    #include "updown.h"
  #endif /* EXT_MODE */  
  %closefile tmpBuf
  
  %<LibSetSourceFileSection(cFile, "Includes", tmpBuf)>

  %openfile tmpBuf
  LinuxCM730 *linux_cm730;
  CM730 *cm730;
  pthread_t timer_thread;
  %closefile tmpBuf

  %<LibSetSourceFileSection(cFile, "Declarations", tmpBuf)>
  
  %openfile tmpBuf
  /*handling the signals (Ctrl + C to quit etc.)*/
  /*this is the function that kills the program (it is called by callback)*/
  void sighandler(int sig)
  {
    exit(0);
  }

  /*this initializes the signals (Ctrl + C to quit etc.)*/
  void signalInitialize()
  {
    cout << "signals: initializing" << endl;
    signal(SIGABRT, &sighandler);
    signal(SIGTERM, &sighandler);
    signal(SIGQUIT, &sighandler);
    signal(SIGINT, &sighandler);
    cout << "signals: initialized" << endl;
  }

  void* timer_proc(void *param)
  {
    static struct timespec next_time;
    uint64_t clock_ns;
    #ifdef rtmGetFinalTime
    int step_index = 0;
    #endif

    clock_gettime(CLOCK_MONOTONIC,&next_time);
    clock_ns = uint64_t(next_time.tv_sec) * uint64_t(1000000000) + uint64_t(next_time.tv_nsec);

    while(%<ERTStopCheck()>)
    {
      %if LibIsSingleRateModel()
      %<LibCallModelStep("")>\
      %else
        %foreach tid = NumSynchronousSampleTimes
      if (rtmStepTask(%<tSimStruct>, %<tid>)) {
        %<LibCallModelStep(tid)>
      }
        %endforeach
      %endif

      #ifdef rtmGetFinalTime
      step_index++;
      if((step_index * %<CompiledModel.FundamentalStepSize>) > rtmGetFinalTime(%<tSimStruct>)) {
        %<RTMSetStopRequested("TRUE")>;
      }
      else
      #endif
      {
        clock_ns += uint64_t(%<CompiledModel.FundamentalStepSize> * 1000000000);
        next_time.tv_sec = clock_ns / 1000000000;
        next_time.tv_nsec = clock_ns % 1000000000;
        clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &next_time, NULL);
      }
    }

    pthread_exit(NULL);
    return NULL;
  }

  void timer_create()
  {
    int error;
    struct sched_param param;
    pthread_attr_t attr;

    pthread_attr_init(&attr);

    error = pthread_attr_setschedpolicy(&attr, SCHED_RR);
    if(error != 0) {
      printf("pthread_attr_setschedpolicy error = %d\n",error);
      exit(-1);
    }

    error = pthread_attr_setinheritsched(&attr,PTHREAD_EXPLICIT_SCHED);
    if(error != 0) {
      printf("pthread_attr_setinheritsched error = %d\n",error);
      exit(-1);
    }

    memset(&param, 0, sizeof(param));
    param.sched_priority = 31;// RT
    error = pthread_attr_setschedparam(&attr, &param);
    if(error != 0) {
      printf("pthread_attr_setschedparam error = %d\n",error);
      exit(-1);
    }

    // create and start the thread
    error = pthread_create(&timer_thread, &attr, &timer_proc, NULL);
    if(error != 0) {
      printf("pthread_create error = %d\n",error);
      exit(-1);
    }
  }

  void timer_destroy()
  {
    int error;
    if((error = pthread_join(timer_thread, NULL))!= 0) {
      printf("pthread_join error = %d\n",error);
      exit(-1);
    }
  }

  void __cxa_pure_virtual(void){}
  %if ExtMode == 1
  int_T main(int_T argc, const char *argv[])
  %else
  int_T main(void)
  %endif
  {
    /* Initialize signal handlers */
    signalInitialize();

    linux_cm730 = new LinuxCM730("/dev/ttyUSB0");
    cm730 = new CM730(linux_cm730);

    cout << "robot: connecting" << endl;
    if (cm730->Connect())
    {
      cout << "robot: connected" << endl;
    }
    else
    {
      cout << "robot: unable to connect to the robot" << endl;
      exit(0);
    }

    %if ExtMode == 1
      /* initialize external mode */
      rtParseArgsForExtMode(argc, argv);
    %endif

    /* Initialize model */
    %<LibCallModelInitialize()>\

    /* Initialize sample times */
    %<FcnInitializeSampleTimeOffsets()>\

    %if ExtMode
      %<SLibGenERTExtModeInit()>
    %endif   

    #ifdef rtmSetStopRequested
    %<RTMSetStopRequested("FALSE")>;
    #endif

    timer_create();

    while (%<ERTStopCheck()>) {
      usleep(1000);
    }

    timer_destroy();

    %<LibCallModelTerminate()>\

    %if ExtMode
      /* External mode */
      rtExtModeShutdown(%<NumSynchronousSampleTimes>);
    %endif

    delete cm730;
    delete linux_cm730;
    return 0;
  }
  %closefile tmpBuf
  
  %<LibSetSourceFileSection(cFile, "Functions", tmpBuf)>

%endfunction

%if !IsModelReferenceTarget()
  %assign ModelName = CompiledModel.Name
  %assign mainFileName = "%<ModelName>_main"
  %<FcnSingleTaskingMain(mainFileName)>
%endif

%selectfile NULL_FILE