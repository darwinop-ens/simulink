%selectfile NULL_FILE

%function FcnSingleTaskingMain(mainFileName) void

  %<LibSetCodeTemplateComplianceLevel(1)>

  %if GenerateSampleERTMain
    %assign CompiledModel.GenerateSampleERTMain = TLC_FALSE
  %endif

  %assign cFile = LibCreateSourceFile("Source", "Custom", mainFileName)
  
  %openfile tmpBuf
  #include <stdio.h>
  #include <unistd.h>
  #include <limits.h>
  #include <string.h>
  #include <libgen.h>
  #include <signal.h>
  #include <time.h>
  #include <sstream>
  #include <iostream>

  #include "CM730.h"
  #include "LinuxNetwork.h"
  #include "LinuxDARwIn.h"

  using namespace std;
  using namespace Robot;

  #include "%<LibGetMdlPubHdrBaseName()>.h"
  #ifdef EXT_MODE
    #include <ext_work.h>          /* External mode header files */
    #include <ext_svr.h>
    #include <ext_share.h>
    #include <updown.h>
  #endif /* EXT_MODE */  
  %closefile tmpBuf
  
  %<LibSetSourceFileSection(cFile, "Includes", tmpBuf)>

  %openfile tmpBuf
  LinuxCM730 *linux_cm730;
  CM730 *cm730;
  %closefile tmpBuf

  %<LibSetSourceFileSection(cFile, "Declarations", tmpBuf)>
  
  %openfile tmpBuf
  /*handling the signals (Ctrl + C to quit etc.)*/
  /*this is the function that kills the program (it is called by callback)*/
  void sighandler(int sig)
  {
    exit(0);
  }

  /*this initializes the signals (Ctrl + C to quit etc.)*/
  void signalInitialize()
  {
    cout << "signals: initializing" << endl;
    signal(SIGABRT, &sighandler);
    signal(SIGTERM, &sighandler);
    signal(SIGQUIT, &sighandler);
    signal(SIGINT, &sighandler);
    cout << "signals: initialized" << endl;
  }

  /* Subtract the `struct timeval' values X and Y,
     storing the result in RESULT.
     Return 1 if the difference is negative, otherwise 0. */
     
  int timeval_subtract (struct timeval *result, struct timeval *x, struct timeval *y)
  {
    /* Perform the carry for the later subtraction by updating y. */
    if (x->tv_usec < y->tv_usec)
    {
      int nsec = (y->tv_usec - x->tv_usec) / 1000000.0 + 1;
      y->tv_usec -= 1000000.0 * nsec;
      y->tv_sec += nsec;
    }
    if (x->tv_usec - y->tv_usec > 1000000.0)
    {
      int nsec = (x->tv_usec - y->tv_usec) / 1000000.0;
      y->tv_usec += 1000000.0 * nsec;
      y->tv_sec -= nsec;
    }
     
    /* Compute the time remaining to wait.
       tv_usec is certainly positive. */
    result->tv_sec = x->tv_sec - y->tv_sec;
    result->tv_usec = x->tv_usec - y->tv_usec;
     
    /* Return 1 if result is negative. */
    return x->tv_sec < y->tv_sec;
  }

  void __cxa_pure_virtual(void){}

  int_T main(void)
  {
    unsigned long step_index = 0;
    struct timeval start_time, current_time, diff_time;
    
    /* Initialize signal handlers */
    signalInitialize();

    linux_cm730 = new LinuxCM730("/dev/ttyUSB0");
    cm730 = new CM730(linux_cm730);

    cout << "robot: connecting" << endl;
    if (cm730->Connect())
    {
      cout << "robot: connected" << endl;
    }
    else
    {
      cout << "robot: unable to connect to the robot" << endl;
      exit(0);
    }

    #ifdef EXT_MODE
      /* initialize external mode */
      rtParseArgsForExtMode(0, NULL);
    #endif

    /* Initialize model */
    %<LibCallModelInitialize()>\

    /* Initialize sample times */
    %<FcnInitializeSampleTimeOffsets()>\

    gettimeofday(&start_time, NULL);
    step_index = 0;

    while (%<ERTStopCheck()>) {
      gettimeofday(&current_time, NULL);
      timeval_subtract(&diff_time, &current_time, &start_time);
      if((diff_time.tv_sec + diff_time.tv_usec * 0.000001) >= (%<CompiledModel.FundamentalStepSize>*step_index)) {
        step_index++;
        %if LibIsSingleRateModel()
        %<LibCallModelStep("")>\
        %else
          %foreach tid = NumSynchronousSampleTimes
        if (rtmStepTask(%<tSimStruct>, %<tid>)) {
          %<LibCallModelStep(tid)>
        }
          %endforeach
        %endif
      }
    }

    %<LibCallModelTerminate()>\

    delete cm730;
    delete linux_cm730;
    return 0;
  }
  %closefile tmpBuf
  
  %<LibSetSourceFileSection(cFile, "Functions", tmpBuf)>

%endfunction

%if !IsModelReferenceTarget()
  %assign ModelName = CompiledModel.Name
  %assign mainFileName = "%<ModelName>_main"
  %<FcnSingleTaskingMain(mainFileName)>
%endif

%selectfile NULL_FILE